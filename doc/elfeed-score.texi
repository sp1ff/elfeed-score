\input texinfo   @c -*- texinfo -*-
@c %**start of header
@setfilename elfeed-score.info
@settitle elfeed-score
@include version.texi
@c %**end of header

@dircategory Emacs
@direntry
* elfeed-score: (elfeed-score). Gnus-style scoring for elfeed.
@end direntry

@copying
This manual corresponds to elfeed-score version @value{VERSION}.

Copyright @copyright{} 2021-2024 Michael Herstine <sp1ff@@pobox.com>

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{https://www.gnu.org/licenses/fdl.html}.

@end quotation

This document was typeset with
@uref{http://www.texinfo.org/, GNU Texinfo}.

@end copying

@c title & copyright-- won't appear in online output.
@titlepage
@title elfeed-score
@subtitle Gnus-style scoring for Elfeed
@author @email{sp1ff@@pobox.com}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@c ``top'' node-- this is the start of the online output, but doesn't
@c appear in the printed manual
@ifnottex
@node Top
@top elfeed-score

Gnus-style scoring for Elfeed.

This manual corresponds to elfeed-score version @value{VERSION}.

@end ifnottex

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Introduction::
* Getting Started::
* The Score File::
* Using elfeed-score::
* Roadmap & Contributing::
* Index::
* Function Index::
* Variable Index::
@end menu

@node Introduction
@chapter Introduction

@url{https://github.com/sp1ff/elfeed-score, elfeed-score} brings
@url{https://gnus.org, Gnus}-style scoring to
@url{https://github.com/skeeto/elfeed, elfeed}. If you're not sure
what that means, you're in the right place. If you know @emph{exactly}
what that means and you just want the technical details, you are also
in the right place.

If you are new to elfeed, elfeed-score, or
@url{https://www.gnu.org/software/emacs/, Emacs} altogether... read
on. This manual is intended to be read front-to-back by new users.

If you are looking for technical details: for a list of elfeed-score
functions, refer to the @ref{Function Index}. For a list of
elfeed-score variables, see the @ref{Variable Index}. For detailed
documentation on rule types, see @ref{Types of Rules, Rule Types}.

For information on obtaining & installing elfeed-score, see the
project @url{https://github.com/sp1ff/elfeed-score, README}. For
information on building & hacking on elfeed-score, see the
@url{https://github.com/sp1ff/elfeed-score/wiki, Wiki}.

@node Getting Started
@chapter Getting Started

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Scoring::
* Starting elfeed-score::
@end menu

@node Scoring
@section Scoring

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Scoring Generalities::
* Manual Scoring::
* Scoring Statistics::
@end menu

@node Scoring Generalities
@subsection Scoring Generalities

@url{https://github.com/skeeto/elfeed, elfeed} is an extensible RSS &
Atom reader for Emacs. By default, it will display entries in reverse
chronological order. This package defines a bit of metadata for each
of your elfeed entries: a "score". A score is an integer (negative or
positive), and higher scores denote entries of greater interest to
you. This package also (optionally) installs a new sort function, so
that Elfeed will display entries with higher scores before entries
with lower scores (entries with the same scores will still be sorted
in reverse chronological order). It also provides an entry display
function for the search buffer that displays each entry's score,
should you choose to install it.

While you can manually assign a score to an entry (@pxref{Manual
Scoring}), you will likely find it more convenient to create rules for
scoring that will be automatically applied to each new entry every
time you update Elfeed. You can score against title, feed, content &
authors by defining strings that will be matched against those
attributes by substring, regexp or whole-word match. You can score
against the feed. You can also score against the presence or absence
of tags. Most kinds of rules can be scoped by Elfeed entry tags, so
that a rule will only be applied if an entry has certain tags (or does
not have certain tags). Many kinds of rules may also be scoped by
feed, so that a rule will only be applied to entries from certain
feeds (or not from certain feeds). Each rule defines an integral
value, and the rules are applied in order of definition. The new
entry's score begins at @code{elfeed-score-scoring-default-score}, and
is adjusted by the value defined by each matching scoring rule.

@defvr {User Option} elfeed-score-scoring-default-score
The default score for an elfeed entry.
@end defvr

For instance, here's a subset of my scoring file at the moment:

@lisp
;;; Elfeed score file                                     -*- lisp -*-
  (("title"
    (:text "OPEN THREAD" :value -1000 :type S)
    (:text "raymond c\\(hen\\)?" :value 250 :type r 
     :tags (t .(@@dev)))
   ("content"
    (:text "type erasure" :value 500 :type s))
   ("title-or-content"
    (:text "california" :title-value 150 :content-value 100 :type s)
    (:text "china" :title-value 150 :content-value 100 :type w))
   ("feed"
    (:text "Essays in Idleness" :value 250 :type S :attr t)
    (:text "Irreal" :value 250 :type S :attr t)
    (:text "Julia Evans" :value 100 :type :type s :attr t)
    (:text "National Weather Service" :value 400 :type S :attr t)
    (:text "emacs-news â€“ sacha chua" :value 350 :type S :attr t))
   ("authors"
     (:text "Jim Geraghty" :value 500 :type s))
   ("tag"
    (:tags (t . reddit-question)
     :value 750))
   (mark -2500))
@end lisp

Like Gnus scoring, this may look like Lisp code, but it is not
directly evaluated. It will be read by the Lisp reader, so it must at
least be a valid Lisp s-expression.

For details of how to form s-expressions elfeed-score will understand,
see @ref{Score File Format, below, below}.

@node Manual Scoring
@subsection Manual Scoring

Scores may also be set on entries manually:

@deffn Command elfeed-score-set-score score ignore-region
Set the score of one or more Elfeed entries to @var{score} (given as a
prefix argument).
@end deffn

Since these scores are presumably significant to the user who took the
trouble to set them, such scores will not be overwritten by other
scoring operations (such as the new entry hook which elfeed-score
installs). Since this behavior was implemented only
@url{https://github.com/sp1ff/elfeed-score/issues/10, recently}, it is
controlled by a configuration variable:

@defvr {User Option} elfeed-score-scoring-manual-is-sticky
This customization variable, if true, will make manual scores
``sticky'' in that they will not be overwritten by other scoring
operations (they can, however, be overwritten by a subsequent manual
scoring operation). If nil, manual scoring is treated no differently
than any other scoring operation.
@end defvr

@node Scoring Statistics
@subsection Scoring Statistics

elfeed-score maintains statistics on when & how frequently each rule
matches an entry (on which more @ref{Score File Format, below,
below}). In earlier versions of the package, each rule's stats were
maintained in the rule structure itself & were persisted along with
each rule to the score file.

This @ref{The Score File, turned out, turned out} to be ill-conceived,
leading to
@url{https://www.unwoundstack.com/blog/elfeed-score-state.html,
split-brain} when the user edited their score file with un-written
stats still in memory.

Today, elfeed-score maintains a separate datastructure holding this
information & automatically writes it to disk in a separate file. The
location of the stats file is defined in
@code{elfeed-score-rule-stats-file}.

@defvr {User Option} elfeed-score-rule-stats-file
The location at which scoring rule stats are maintained.

The default value is @file{elfeed.stats} in
@code{user-emacs-directory}, which see @ref{Init File,
user-emacs-directory, user-emacs-directory, elisp, Emacs Lisp}.
@end defvr

Since this file is meant to be maintained automatically by
elfeed-score, this manual won't go over the file format.

@node Starting elfeed-score
@section Starting elfeed-score

@cindex starting elfeed-score
@cindex elfeed-score initialization

Once you've setup your score file, and assuming you've installed
elfeed-score, begin or switch to your Emacs session and say:

@lisp
(require 'elfeed-score)
@end lisp

Just loading the library will *not* modify elfeed; you need to
explicitly enable the package for that:

@lisp
(elfeed-score-enable)
@end lisp

This will install the new sort function & new entry hook, as well as
read your score & stats files. It will also install an elfeed update
hook; this is to detect when an update has completed so that we can
write-out the new rule stats to disk. NB. @code{elfeed-score-enable}
is autoloaded, so if you've installed this package in the usual way,
you should be able to just invoke the function & have the package
loaded & enabled automatically.

@deffn Command elfeed-score-enable
Install the new sort function, the new entry hook & the update
hook. Read the score & stats files. With prefix arg do @emph{not}
install the custom sort function.
@end deffn

Some elfeed users have already customized
@code{elfeed-search-sort-function} and may not wish to have
elfeed-score install a new one. @code{elfeed-score-enable} takes a
prefix argument: if present, it will install the new entry hook &
commence scoring, but will @emph{not} install the new sort
function. Such users may refer to @code{elfeed-score-sort} if they
would like to incorporate scoring into their sort functions.

Because of how @code{add-hook} operates, if @code{elfeed-score} is
enabled after all other @code{elfeed} configuration is completed
(including addition of taggers via @code{elfeed-make-tagger}) it will
be the first thing run on a new entry. Therefore
@code{elfeed-score-enable} takes a second argument: the depth at which
the scoring function shall be placed in in
@code{elfeed-new-entry-hook}.

@deffn Utility elfeed-score-sort
@code{elfeed-search-sort-function}-compliant function that will
sort elfeed entries by score first, then timestamp.
@end deffn

The package defines a keymap, but does not bind it to any key. I like
to set it to the @kbd{=} key:

@lisp
(define-key elfeed-search-mode-map "=" elfeed-score-map)
@end lisp

Now, only when you're in the elfeed-score search buffer, you can
access elfeed-score commands on the @kbd{=} key.

elfeed allows us to customize how entries are displayed in the elfeed
search buffer through the variable
@code{elfeed-search-print-entry-function}. Because users have
customized this, elfeed-score does not alter this variable directly
Rather, it offers a replacement implementation,
@code{elfeed-score-print-entry}, should you wish to use it.

@deffn Utility elfeed-score-print-entry
Prefix each entry with its score when displayed in the elfeed
search buffer.
@end deffn

Install it like so:

@lisp
(setq elfeed-search-print-entry-function #'elfeed-score-print-entry)
@end lisp

While this is not turned on by @code{elfeed-score-enable},
@code{elfeed-score-unload} will remove it, if it's there.

@deffn Command elfeed-score-unload
Unload elfeed-score.
@end deffn

Even if you've customized the elfeed print function, if you would like
to incorporate the score into your version, you can use the
@code{elfeed-score-print-entry} implementation for inspiration.

@node The Score File
@chapter The Score File

@cindex score file, introduction

The rules for scoring are written down in the score file, a plain-text
file containing a single Lisp form. The location of the score file is
defined in @code{elfeed-score-serde-score-file}.

@defvr {User Option} elfeed-score-serde-score-file
The location at which scoring rules are maintained.

The default value is @file{elfeed.score} in
@code{user-emacs-directory}, which see @ref{Init File,
user-emacs-directory, user-emacs-directory, elisp, Emacs Lisp}.
@end defvr

We'll go over the format in more detail @ref{Score File Format, below,
below}.

It is important to note that the score file is authored & maintained
by the user: elfeed-score will only read from it, not write to
it. Prior versions of elfeed-score kept assorted statistics about each
rule (how many times it matched, for instance) in the rule structures
themselves, and would periodically write them out to the score
file. This @url{https://github.com/sp1ff/elfeed-score/issues/13, led}
to situations where users would lose edits to their score file when
elfeed-score blindly wrote out its in-memory state. Beginning with
elfeed-score 0.7.10, those statistics are tracked & persisted
separately, which will hopefully put an end to this problem.

That said, if you update your rules by hand, you need to tell
elfeed-score to re-load it before (re-)scoring any elfeed entries. You
can do this by invoking @code{elfeed-score-load-score-file} (@kbd{=
l}):

@deffn Command elfeed-score-load-score-file
Load the score file into the current session.
@end deffn

@node Score File Format
@section Score File Format

The score file is a plain-text file containing a single Lisp
form. Under the hood, elfeed-score opens your file, inserts its
contents into a temporary buffer, and calls @code{read-from-string}
(@pxref{Input Functions, read-from-string, read-from-string, elisp,
Emacs Lisp}) on the contents. Note that this means any comments will
be discarded; use the @code{:comment} field to attach notes to your
rules, instead.

The form is a list of lists; each sub-list begins with a symbol or a
string identifying that sub-list's nature & purpose. The sub-list
identifiers elfeed-score recognizes are:

@cindex score file entries

@itemize
@item
@code{version} The sublist named by the symbol @code{version} contains
the version of the score file format. You do not need to include this
in your initial score file; it is written out automatically by
elfeed-score. elfeed-score maintains backward compatibiliy in that
score files in older format versions are still recognized. The most
recent format version will always be used when the score file is
updated, however. Also, an older elfeed-score will reject a more
recent score file.

@cindex score file version

When elfeed-score loads a score file that uses an archaic version
(i.e. a version less than @code{elfeed-score-serde-current-format}) it
will announce the fact that your score file will be updated and make a
backup of your current score file in @code{%s.~%d~} where @code{%s} is
replaced by @code{elfeed-score-serde-score-file} and @code{%d} is
replaced by your score file's current version (so that you will end up
with a copy of the last score file in each format over time).

@defvar elfeed-score-serde-current-format
The version of the score file format employed by elfeed-score.
@end defvar

It will also immediately re-write the score file in the current
format.

@item
``title''
The sublist named by the string ``title'' contains rules that
match against elfeed entry titles, on which more below in @ref{title
Rules}.

@item
``content''
The sublist named by the string ``content'' contains rules that
match against elfeed entry content, on which more below in @ref{content
Rules}.

@item
``title-or-content''
The sublist named by the string ``title-or-content'' contains rules
that match against both entry title @emph{and} content, on which more
below in @ref{title-or-content Rules}.

@item
``authors''
This sublist contains rules that match against the entry author, on
which more below in @ref{authors Rules}.

@item
``tag''
This sublist contains rules that match against entries' tags;
see @ref{tag Rules} below for more details.

@item
``feed''
This sublist contains rules that match against entries' feed;
see @ref{feed Rules} below for more details.

@item
``link
This sublist contains rules that match against entries' link;
see @ref{feed Rules} below for more details.

@item
``adjust-tags''
This sublist contains rules that will be applied @emph{after} an
entry's score has been computed and that add or remove tags based on
that score.  Details below at @ref{adjust-tags Rules}.

@item
@code{mark}
This sublist contains an integer; if an entry's final score is below
this value, the entry will be marked as ``read''. Details below in
@ref{mark Rule}.

@end itemize

Until elfeed-score 0.7, all rules were serialized to flat lists, with
each attribute in a known position in the list (for instance, title
rules wrote down their match text in position 0, the match value in
position 1, and so forth, while the other rule types each had their
own format).

As time went on, the number of attributes for any given rule type
grew. Using flat lists as a serialization format became untenable for
two reasons:

@enumerate

@item
Having to "just know" that slot @code{i} was for this & slot @code{j}
was for that became increasingly burdensome for the package author,
let alone contributors & users.

@item
It makes validation hard: if the score file author forgets that slot
@code{i} is for this thing, but provides the thing that goes in slot
@code{i + 1}, then when elfeed-score calls @code{(nth in i)} it will
get @emph{something} back, but will not discover that it's the wrong
sort of thing for some time, which makes it hard to craft a usable
error message; worse, elfeed-score may never discover it & instead
fail silently.

@end enumerate

Beginning with build 0.7.3 (format version 6), elfeed-score now uses
property lists as its serialization format. This will address these
two issues, at the cost of making authoring rules more prolix: instead
of saying:

@lisp
("match text" 100...)
@end lisp

one now has to say:

@lisp
(:text "match text" :value 100...)
@end lisp

Given that fields set to their default values do @emph{not} have to be
specified, this will hopefully not be too inconvenient, and will enable
better error messages on reading score files.

@cindex new score file format

@node Types of Rules
@section Types of Rules

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* title Rules::
* content Rules::
* title-or-content Rules::
* feed Rules::
* authors Rules::
* tag Rules::
* link Rules::
* UDF Rules::
* adjust-tags Rules::
* mark Rule::
@end menu

@node title Rules
@subsection title Rules

@cindex title rules

``title rules'' are rules that are matched against each entry's
title. You may match by substring, regexp or whole word. The match may
be case sensitive or case-insensitive. Of course, the rule needs to
specify the amount to be added to an entry's score on successful
match.

In the score file (@pxref{The Score File}), title rules are
represented by a property list of up to six attributes:

@enumerate
@item
@code{:text}: The match text.

@item
@code{:value}: The match value.
This is an integer specifying the amount by which the entry's score
should be adjusted, should the text match

@item
@code{:type}: The match type.

@cindex match type

@anchor{match-type}This is a symbol, and must be one of @code{s},
@code{S}, @code{r}, @code{R}, @code{w} or @code{W} for
case-insensitive substring match, case-sensitive substring match,
case-insensitive regexp match or case-sensitive regexp match, and
case-insensitive or case-sensitive whole word match, respectively.

Note that regular expressions use Emacs Lisp regular expression syntax
(@pxref{Regular Expressions, Regular Expressions, Regular Expressions,
elisp, Emacs Lisp}).

@cindex regular expression syntax

Whole word matching just feeds the match text to
@code{word-search-regexp} (@pxref{String Search, String Search, String
Search, elisp, Emacs Lisp}) before doing a regexp search.

@item
@code{:tags}: Tag scoping rules.

You may wish to apply this rule only to entries that have certain tags
(or that do @emph{not} have certain tags). @xref{Scoping Rules by
Tags} for how to do that.

This property is optional.

@item
@code{:feeds}: Feed scoping rules.

You may wish to apply this rule only to entries that came from certain
feeds (or did @emph{not} come from certain feeds).  @xref{Scoping
Rules by Feed} for how to do that.

This property is optional.

@item
@code{:comment}: Rule comment

An optional, free-form note on this rule. Since Lisp comments will be
lost on read, this provides a way for the score file author to
annotate rules.

@end enumerate

So, for instance, the following rule:

@lisp
("title"
  (:text "rust.*who.s hiring" :value 1500 :type r))
@end lisp

would match each entry's title against the regular expression
``rust.*who.s hiring'' (without regard to case) and adds 1500 to the
score of any entry that matches.

Note that it takes advantage of the fact that only the @code{:text},
@code{:value} & @code{:type} properties are required.

@node content Rules
@subsection content Rules

@cindex content rules

``content rules'' are very similar to @ref{title Rules} except that
they match against an entry's content rather than its title.  For that
reason, this section will be very brief-- refer to @ref{title Rules}
for the details of each element.

In the score file (@pxref{The Score File}), content rules are
represented by six properties:

@enumerate
@item
@code{:text} The match text

@item
@code{:value} The match value

@item
@code{:type} The match type as per @ref{match-type, above, above}.

@item
@code{:tags} Tag scoping rules

@item
@code{:feeds} Feed scoping rules

@item
@code{:comment} Comment

@end enumerate

As @ref{title Rules, above, above}, only the first three elements are
required.

@node title-or-content Rules
@subsection title-or-content Rules

@cindex title-or-content rules

When searching for text in entries on which to score, it can be
convenient to check both title @emph{and} content. Rather than
repeating each rule in both the ``title'' and ``content'' elements of
the score file, you can use ``title-or-content'' rules. These rules
consist of seven elements, not six:

@enumerate
@item
@code{:text} The match text, as with title & content rules

@item
@code{:title-value} The title match value

The value by which an entry's score will be adjusted when the @emph{title}
matches. This allows different scoring values for title & content matches,
on the assumption that a title match would be considered more significant.

@item
@code{:content-value} The content match value

The value by which an entry's score will be adjusted when the
@emph{content} matches.

@item
@code{:type} The match type as per @ref{match-type, above, above}.

@item
@code{:tags} Tag scoping rules

@item
@code{:feeds} Feed scoping rules

@item
@code{:comment} Comment

@end enumerate

Note that both entry attributes are checked, so both score values have
the potential to added to any given entry.

For instance, the following rule:

@lisp
("title-or-content"
  (:text "california" :title-value 150 :content-value 100 :type s))
@end lisp

would add 150 to any element who's title contains the string
``california'', as well as 100 if its content also contains that text.

@node feed Rules
@subsection feed Rules

@cindex feed rules

You can adjust an entry's score on the basis of the feed that produced
it with a ``feed'' rule. For instance I use this to prioritize certain
sources.  A feed rule is defined by the following six elements:

@enumerate

@item
@code{:text}: Match text
The text to be matched against the feed title, URL or author

@item
@code{:value}: Match value
The value by which an entry's score will be adjusted should there be a
match

@item
@code{:type}: Match type
The match type as per @ref{match-type, above, above}.

@item
@code{:attr}: Feed attribute
One of the symbols @code{t}, @code{u} or @code{a} for title, URL, or
author respectively; this determines the attribute of the feed against
which this rule's text will be matched.

@item
@code{:tags}: Tag scoping rules
You may wish to apply this rule only to entries that have certain tags
(or that do @emph{not} have certain tags). See @ref{Scoping Rules by
Tags, below, below} for how to do that.

@item
@code{:comment} Comment

@end enumerate

For example, this rule:

@lisp
("feed"
  (:text "National Weather Service" :value 400 :type S :attr t))
@end lisp

will check the feed title for each entry against the string ``National
Weather Service'' (case will count). Should there be a match, the
corresponding entry will have 400 added to its score.

@node authors Rules
@subsection authors Rules

@cindex authors rules

Some feeds are not produced by a single author. A feed that contains
academic papers, for instance, may tag each entry with the authors of
the paper to which that entry corresponds. You can score against an
@emph{entry}'s authors with an authors rule.

@enumerate
@item
@code{:text}: The match text
For each entry, if the ``authors'' meta-data is present, the authors'
names will be concatenated (separated by ``, ``) and matched against
this text for scoring purposes.

@item
@code{:value}: The match value
This is an integer specifying the amount by which the entry's score
should be adjusted, should the text match 

@item
@code{:type}: The match type

@item
@code{:tags}: Tag scoping rules

You may wish to apply this rule only to entries that have certain tags
(or that do @emph{not} have certain tags). See @ref{Scoping Rules by
Tags, below, below} for how to do that.

@item
@code{:feeds}: Feed scoping rules

You may wish to apply this rule only to entries that came from certain
feeds (or did @emph{not} come from certain feeds). See @ref{Scoping
Rules by Feed, below, below} for how to do that.

@item
@code{:comment} Comment

@end enumerate

@node tag Rules
@subsection tag Rules

@cindex tag rules

elfeed allows one to automatically tag new entries as they are
discovered.  It can therefore be convenient to group entries that come
from many different feeds but share a tag or tags. That is the purpose
of ``tag'' rules.

``tag'' rules are defined by four properties:

@enumerate

@item
@code{:tags}: Tags

The tags whose presence or absence will trigger this rule. They are
specified as a cons cell (@pxref{Cons Cell and List Types, cons cell,
cons cell, elisp, Emacs Lisp}) of the form:

@lisp
(switch . tags)
@end lisp

@code{switch} is either @code{t} or @code{nil} and @code{tags} is
either a tag (i.e. a symbol) or a list of tags. If @code{switch} is
true, this rule will apply to any entry tagged with one or more tags
listed in @code{tags}. Conversely, if @code{switch} is false, the rule
will apply to entries who posses @emph{none} of the tags in
@code{tags}.

@item
@code{:value}: Match value
The amount by which an entry's score shall be adjusted should this
rule match.

@item
@code{:comment} Comment

@end enumerate

@node link Rules
@subsection link Rules

@cindex link rules

``link rules'' are rules that are matched against each entry's Link
attribute. They are similar to @ref{title Rules} excepting the entry
attribute to be matched. For that reason, this section will be brief--
refer to @ref{title Rules} for the details of each element.

In the score file (@pxref{The Score File}), link rules are
represented by seven properties:

@enumerate
@item
@code{:text} The match text

@item
@code{:value} The match value

@item
@code{:type} The match type as per @ref{match-type, above, above}.

@item
@code{:tags} Tag scoping rules

@item
@code{:feeds} Feed scoping rules

@item
@code{:comment} Comment

@end enumerate

As @ref{title Rules, above, above}, only the first three elements are
required.

@node UDF Rules
@subsection UDF Rules

@cindex UDF rules

If none of the other rule types will do, you can define your own
scoring function. ``UDF`` stands for user-defined function: such a
function shall take a single parameter of type @code{elfeed-entry} and
return either nil (to indicate no interest in this entry) or an
integer (representing this rule's contribution to this entry's score).

In the score file (@pxref{The Score File}), UDF rules are represented
by five properties:

@enumerate
@item
@code{:function} The user-defined function; typically this will be a
@code{lambda} form or a symbol

@item
@code{:display-name} elfeed-score will attempt to deduce a name for
the function; if this value is specified, the given string will be
used for logging, pretty-print & so forth

@item
@code{:tags} Tag scoping rules

@item
@code{:feeds} Feed scoping rules

@item
@code{:comment} Comment

@end enumerate

@node adjust-tags Rules
@subsection adjust-tags Rules

@cindex adjust-tags rules

Until now, all the rules have been used to determine an entry's
score. The ``adjust-tags'' rule (and the ``mark'' rule @ref{mark Rule,
below, below}) act on entries @emph{after} their scores have been
determined.

The adust-tags rule was inspired by John Kitchin's article
@url{https://kitchingroup.cheme.cmu.edu/blog/2017/01/05/Scoring-elfeed-articles/,
Scoring Elfeed Articles}. He computes a score and adds one or two tags
to entries whose score is sufficiently high. It always bothered me
that elfeed-score couldn't do that, so in build 0.4.3, I added this
rule type. These will add or remove tags based on whether the entry's
score is above or below a given threshold.

adjust-tags rules are given by four properties:

@enumerate

@item
@code{:threshold}: The threshold at which the rule shall apply

This is defined by a cons cell (@pxref{Cons Cell and List Types, cons
cell, cons cell, elisp, Emacs Lisp}) of the form:

@lisp
(switch . threshold)
@end lisp

@code{switch} may be @code{t} or @code{nil} and @code{threshold} is
the threshold against which each entry's score shall be compared. If
@code{switch} is @code{t}, the rule applies if the score is greater
than or equal to @code{threshold}; if @code{switch} is @code{nil} the rule
applies if score is less than or equal to @code{threshold}.

@item
@code{:tags}: The tags to be added or removed

This is also given by a cons cell

@lisp
(switch . tags)
@end lisp

If @code{switch} is @code{t} & the rule applies, @code{tags} (either a
single tag or a list of tags) will be added to the entry; if
@code{switch} is @code{nil}, they will be removed

@item
@code{:comment} Comment

@end enumerate

For example, the following rules:

@lisp
(("adjust-tags"
  (:threshold (t . 1000) :tags (t . a))
  (:threshold (nil . -1000) :tags (nil . b)))
@end lisp

will add the tag @code{'a} to all entries whose score is 1000 or more,
and remove tag @code{'b} from all entries whose score is -1000 or
less.

@node mark Rule
@subsection mark Rule

@cindex mark rule

Like the ``adjust-tag'' rule (@pxref{adjust-tags Rules, above, above},
the mark rule operates on an entry after scoring has completed. If
present, it simply specifies an integer; any entry whose score is
below this number will be marked as read (in that it will have the
@code{'unread} tag removed from it). Since bookmarked elfeed searches
typically specify the @code{'unread} tag as a criterion, this
essentially means ``if an entry's score is below this number, don't
even show it to me.''

Unlike the other rules, there may only be one mark rule.

Example:

@lisp
(mark -2500)
@end lisp

@node Scoping Rule Application
@section Scoping Rule Application

@cindex scoping

You may find that you only want some rules to @emph{not} be applied to
every entry, but only in certain contexts. Many of the rules described
above can be scoped to apply to only entries with certain tags, or to
only entries from certain feeds.

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Scoping Rules by Tags::
* Scoping Rules by Feed::
@end menu

@node Scoping Rules by Tags
@subsection Scoping Rules by Tags

@cindex rule scoping, tags

``title'', ``content'', ``title-or-content'', ``authors'' & ``feed''
rules can be scoped by tag (@pxref{Types of Rules}). In the
description of each of these type of rules above, you will note a slot
reserved for ``tag scoping rules''. In each case these rules are
expressed as a cons cell of the form:

@lisp
(boolean . (tag...))
@end lisp

The car is a boolean, and the cdr is a list of tags.  If the former is
@code{t}, the rule will only be applied if the entry has at least one
of the tags listed. If the boolean value is @code{nil}, the rule will
only apply if the entry has *none* of the tags listed.

For instance, this is an entry in my score file at the time of this
writing:

@lisp
("title-or-content
  (:text "workspace" :title-value 150 :content-value 75 :type s
   :date 1611937077.6047099
   :tags (t linux)
   :hits 48)
@end lisp

It performs a case-insensitive substring match against entry title and
content, adding 150 & 75 points to an entry's score on match,
respectively. It matched most recently at Friday, January 29, 2021
8:17:57.604 AM PST, and has matched 48 times in total.

Of particular interest here is the fact that it will only be applied
to entries with the tag @code{'linux}, since ``workspace'' is fairly
generic term, and I am only specific interested in the term as it
applies to Linux window managers.

@node Scoping Rules by Feed
@subsection Scoping Rules by Feed

@cindex rule scoping, feed

``title'', ``content'', ``title-or-content'' & ``authors'' rules can
also be scoped by feed; that is, you can arrange to have such rules
only apply to entries from certain feeds (or apply only to entries
@emph{not} from certain feeds) (@pxref{Types of Rules}).

Each of these rule types reserves a slot in their definiotn for ``feed
scope rules''. Such fules are expressed as a cons cell:

@lisp
(boolean . ((attr match-type matex-text)...))
@end lisp

The car is a boolean, and the cdr is a list of feed selectors.  If the
former is @code{t}, the rule will only be applied if the entry's feed
matches at least one of the selectors listed. If the boolean value is
@code{nil}, the rule will only apply if the entry's feed matches
@emph{none} of the selectors listed.

Each selector is itself a three-tuple consisting of:

@enumerate

@item
Feed attribute
One of the symbols @code{t}, @code{u} or @code{a} for title, URL, or
author respectively; this determines the attribute of the feed against
which this rule's text will be matched.

@item
Match type
The match type as per @ref{match-type, above, above}.

@item
Match text

@end enumerate

Example:

@lisp
("title"
  (:text "foo" :value 100 :type s
   :feeds (t . ((t S "Bar")))))
@end lisp

This defines a title rule @xref{title Rules} that checks for a
substring matching ``foo'' in the entry title and adds 100 points to
its score on match.  However, it will @emph{only} match entries
originating from feeds whose title contains the string ``Bar''
(case-sensitive).

@node A Complete Score File
@section A Complete Score File

@cindex complete score file, example

This is a small subset of my current score file at the time of this
writing. Working score files tend to grow much larger than this
(@pxref{Rule Maintenance} below), but it is a complete example.

@lisp
;;; Elfeed score file                                     -*- lisp -*-
((version 10)
 ("title"
  (:text "rust.*who.s hiring" :value 1500 :type r)
  (:text "Microsoft Security Response Center" :value 1500 :type s))
 ("content"
  (:text "/u/I_am_dom_" :value 250 :type s :tags (t @@china)))
 ("title-or-content"
  (:text "california" :title-value 150 :content-value 100 :type s)
  (:text "melpa" :title-value 250 :content-value 150 :type s
   :tags (t @@dev @@emacs))
  (:text "workspace" :title-value 150 :content-value 75 :type s
   :tags (t linux)))
 ("tag"
  (:tags (t . reddit-question)
   :value 750))
 ("authors"
  (:text "Jim Geraghty" :value 500 :type s))
 ("feed"
  (:text "Hacker News" :value 150 :type S :attr t))
 (mark -2500)
 ("adjust-tags"))
@end lisp

@node Using elfeed-score
@chapter Using elfeed-score

@cindex using

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
* Startup in Detail::
* Asking elfeed-score How It's Scoring an Entry::
* Adding Rules Interactively::
* Rule Maintenance::
@end menu

@node Startup in Detail
@section Startup in Detail

Once you've setup your score file (@pxref{The Score File}), and
started elfeed-score (@pxref{Starting elfeed-score}), any @emph{new}
entries will be scored automatically, but the entries already in your
database have not yet been scored. Scoring is idempotent in that
scoring an entry more than once will always result in it having the
same score assigned. This means you can load an Elfeed search, and
then, in the Elfeed search buffer @code{*elfeed-search*}, score all
results with @code{elfeed-score-score-search}, or @kbd{= v}. When the
command completes, the view will be re-sorted by score. Your stats
file will also have been updated on disk (to record the last time that
each rule matched).

@deffn Command elfeed-score-score-search
Score the current set of search results.
@end deffn

You can configure score logging by setting the variable
@code{elfeed-score-log-level}.

@defvr {User Option} elfeed-score-log-log-level
Level at which `elfeed-score' shall log; may be one of 'debug, 'info,
'warn, or 'error.
@end defvr

By default it will be @code{'warn}, which will produce very little
output. To trouble-shoot a balky rule, type

@lisp
(setq elfeed-score-log-level 'debug)
@end lisp

re-score your current view (@kbd{= s}), and switch to buffer
@code{*elfeed-score*}.

You can also trouble-shoot rules using the ``explain'' feature
@ref{Asking elfeed-score How It's Scoring an Entry, below, below}.

@node Asking elfeed-score How It's Scoring an Entry
@section Asking elfeed-score How It's Scoring an Entry

If you've got an entry that's not being scored in the manner you
expect, you can ask elfeed-score to explain itself by selecting the
offending entry & invoking @code{elfeed-score-scoring-explain-entry}
(@kbd{= x}):

@deffn Command elfeed-score-scoring-explain-entry
Explain an Elfeed ENTRY.

This function will apply all scoring rules to an entry, but will not
change anything (e.g.  update the entry's meta-data, or the
last-matched timestamp); instead, it will provide a human-readable
description of what would happen if the entry were to be scored,
presumably for purposes of debugging or understanding of scoring
rules.
@end deffn

@code{elfeed-score-scoring-explain-entry} will list the matching rules
in a new buffer.  Clicking on or hitting Enter on a rule will open up
the score file & position point on the corresponding rule definition.

@node Adding Rules Interactively
@section Adding Rules Interactively

Initially, elfeed-score rules were hand-authored by the user in
@ref{The Score File}; the workflow being:

@enumerate

@item
Hand edit the score file.

@item
Re-load the score file via @command{elfeed-score-load-score-file}.

@item
Re-score the current search via @command{elfeed-score-score-search}.

@end enumerate

The 0.8 releases introduced interactive scoring.  In the Elfeed search
buffer, or the Elfeed show buffer, one can now add a new rule based on
the current entry through an Emacs command
@code{elfeed-score-main-add-*-rule}.

Most rules have a number of attributes, and it would be onerous to
have to supply them each time one of these commands is invoked.
Therefore these commands obey a set of customizable variables that
will, in the general case, supply defaults:

@defvr {User Option} elfeed-score-maint-default-match-type
The default match type for interactively added rules (one of 's, 'S,
'r, 'R, 'w or 'W).
@end defvr

@defvr {User Option} elfeed-score-maint-default-scope-to-feed
Governs whether the interactively added rule is scoped to the entry's
feed.  May be one of 'yes, 'no or 'ask.
@end defvr

@defvr {User Option} elfeed-score-maint-default-scope-to-tags
Governs whether the interactively added rule is scoped to the entry's
tags (when applicable).  May be one of 'yes, 'no or 'ask.
@end defvr

@defvr {User Option} elfeed-score-maint-default-feed-attribute
Default feed attribute against which an interactively added feed rule
will be matched.  May be one of 't, 'u, or 'a for title, URL or
author, respectively.
@end defvr

These rules can be invoked in a few ways:

@itemize

@item
With no prefix argument: the match value & text are supplied
interactively.  Other rule attributes will be gathered according to
their ``default'' user options.

@item
With a numeric prefix argument; the prefix argument's value will be
used as the match value.  The match text must still be entered
interactively.  Other rule attributes will be gathered according to
their corresponding ``default'' user options (on which more below).

@item
One or more universal-arguments: the match values & text must be
supplied interactively.  All defaults will be ignored and the other
rule attributes can be entered interactively.

@end itemize

The functions for adding rules interactively:

@deffn Command elfeed-score-maint-add-title-rule value
Add a title rule based on the current entry.  The default value for
the match text will be the current entry's title.
@end deffn

@deffn Command elfeed-score-maint-add-content-rule value
Add a content rule based on the current entry.  This may only be
invoked when displaying an Elfeed entry.  If the region is active, the
default match text will be the selection.  Otherwise, the default
match text will be the entry's contents.
@end deffn

@deffn Command elfeed-score-maint-add-feed-rule value
Add a feed rule based on the current entry.
@end deffn

@deffn Command elfeed-score-maint-add-authors-rule value
Add an authors rule based on the current entry.
@end deffn

@deffn Command elfeed-score-maint-add-tag-rule value
Add a tag rule based on the current entry.
@end deffn

@deffn Command elfeed-score-maint-add-link-rule value
Add a link rule based on the current entry.
@end deffn

@deffn Command elfeed-score-maint-add-title-or-content-rule title-value content-value
Add a title-or-content rule based on the current entry.  If displaying
an entry, and the region is active, the default match text will be the
selection.  Otherwise, it will be the entry text.
@end deffn

@node Rule Maintenance
@section Rule Maintenance

As time goes by, you may find your score file growing considerably in
size & complexity. elfeed-score offers a few reporting functions for
looking at the totality of your rules in a few ways:

@deffn elfeed-score-maint-display-rules-by-last-match(&optional category)
Display all scoring rules in descending order of last match.

CATEGORY may be used to narrow the scope of rules displayed.  If
nil, display all rules.  If one of the following symbols, display
only that category of rules:

    :title
    :feed
    :content
    :title-or-content
    :authors
    :tag
    :adjust-tags

Finally, CATEGORY may be a list of symbols in the preceding
list, in which case the union of the corresponding rule
categories will be displayed.
@end deffn

@deffn Command elfeed-score-maint-display-rules-by-match-hits (&optional category)
Display all scoring rules in descending order of match hits.

CATEGORY may be used to narrow the scope of rules displayed.  If
nil, display all rules.  If one of the following symbols, display
only that category of rules:

    :title
    :feed
    :content
    :title-or-content
    :authors
    :tag
    :adjust-tags

Finally, CATEGORY may be a list of symbols in the preceding
list, in which case the union of the corresponding rule
categories will be displayed.
@end deffn

@node Roadmap & Contributing
@chapter Roadmap & Contributing

In September 2021, I felt comfortable releasing elfeed-score ``1.0'',
implying a certain level of stability (and notably will respect semver
going forward). I've sketched some thoughts on elfeed-score's future
in the @url{https://github.com/sp1ff/elfeed-score, README}.

Bugs & feature requests are welcome in the
@url{https://github.com/sp1ff/elfeed-score/issues, Issues} section of
the project.

If you'd like to hack on elfeed-score, I've started a
@url{https://github.com/sp1ff/elfeed-score/wiki, Wiki} for that and am
always happy to discuss PRs.

Finally, you can just reach out directly at @email{sp1ff@@pobox.com}, or
shoot a webmention to me at my @url{https://www.unwoundstack.com,web site}.

@node Index
@unnumbered Index

@printindex cp

@node Function Index
@unnumbered Function Index

@printindex fn

@node Variable Index
@unnumbered Variable Index

@printindex vr

@bye

